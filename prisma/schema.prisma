// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Listner{
  id  String  @id  @default(uuid())
  email String @unique
  provider Provider
  streams  Stream[]
  upvotes  Upvote[]
}

model Stream{
  id            String    @id   @default(uuid())
  type          StreamType
  url           String
  extractedId   String
  title         String
  thumbnail     String
  active        Boolean   @default(true)
  userId        String
  upvotes       Upvote[]
  user          Listner      @relation(fields: [userId], references: [id])  
}

model Upvote{
  id        String    @id   @default(uuid())
  userId    String
  streamId  String
  user      Listner    @relation(fields: [userId], references: [id])
  stream    Stream  @relation(fields: [streamId], references: [id])
  @@unique([userId, streamId])
}

enum StreamType{
  Spotify
  Youtube
}

enum Provider{
  Google
}



model User {
  id            String    @id @default(cuid())
  name          String?   // Optional user name
  email         String?   @unique
  emailVerified DateTime? 
  image         String?   // Profile picture

  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?     
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String? 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
